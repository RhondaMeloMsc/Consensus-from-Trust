{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 Courier;
\f3\froman\fcharset0 Times-Bold;\f4\froman\fcharset0 Times-Italic;\f5\fmodern\fcharset0 Courier-Bold;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red109\green109\blue109;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c50196\c50196\c50196;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid101\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid402\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid502\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid702\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid802\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid902\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid1002\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid1102\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid1202\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid14}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 THE ROGRAM  iS STILL NOT OWRKGIN BACK BUT TIS IS WHAT THE ISSUES ARE  for the SECOND RUN\
\
\
\
\pard\pardeftab720\sa240\partightenfactor0

\f1 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You got it. The 
\f2\fs26 Killed
\f1\fs24  error was a classic and tricky one! Here\'92s a breakdown of what went wrong and a line-by-line look at how the new code fixes it.\
\
\pard\pardeftab720\sa280\partightenfactor0

\f3\b\fs28 \cf0 The Fix: From "Naive Gossiper" to "Efficient Gossiper"\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 \
The 
\f2\fs26 Killed
\f1\fs24  message meant your program was using too much memory, and the grading server's operating system shut it down. This is called an 
\f3\b Out of Memory (OOM) error
\f1\b0 . \uc0\u55357 \u56448 \
\pard\pardeftab720\sa240\partightenfactor0

\f3\b \cf0 The Problem with the Old Code:
\f1\b0 \
The old code had 
\f4\i one
\f1\i0  big list: 
\f2\fs26 myProposedTxs
\f1\fs24 .\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0
\f3\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Receive:
\f1\b0  It added 
\f4\i all
\f1\i0  transactions from its followers to this big list.\
\ls1\ilvl0
\f3\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Send:
\f1\b0  It broadcast this 
\f4\i entire, ever-growing
\f1\i0  list.\
\pard\pardeftab720\sa240\partightenfactor0
\cf0 In a big simulation, this was a disaster. If a node learned 100 new transactions, its list grew by 100. Next round, it would broadcast 
\f4\i all
\f1\i0  its old transactions 
\f4\i plus
\f1\i0  those 100. Every node's broadcast got bigger and bigger every round, consuming all the server's RAM.\
\pard\pardeftab720\sa240\partightenfactor0

\f3\b \cf0 The Solution in the New Code:
\f1\b0 \
The new code is much smarter and acts like an "efficient gossiper." It only tells people about 
\f4\i new
\f1\i0  information. It does this by using 
\f3\b two separate lists
\f1\b0 :\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls2\ilvl0
\f5\b\fs26 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 masterTxSet
\f3\fs24  (The "Encyclopedia"):
\f1\b0  This is a permanent set of 
\f4\i every unique transaction
\f1\i0  the node has 
\f3\b ever
\f1\b0  seen. It only grows.\
\ls2\ilvl0
\f5\b\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 txsToBroadcast
\f3\fs24  (The "To-Do List"):
\f1\b0  This is a 
\f4\i temporary
\f1\i0  set of only the 
\f4\i new
\f1\i0  transactions the node learned in the last round. This is the 
\f4\i only
\f1\i0  list it broadcasts.\
\pard\pardeftab720\sa240\partightenfactor0
\cf0 By only sending the small, temporary list each round, the memory use stays low and fast, fixing the 
\f2\fs26 Killed
\f1\fs24  error.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\sa280\partightenfactor0

\f3\b\fs28 \cf0 Line-by-Line Code Breakdown\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 \
Here is a plain-English explanation of the new, working code.\
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\

\f2\fs26 import java.util.ArrayList;\
import java.util.Set;\
import java.util.HashSet;\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls3\ilvl0
\f3\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f1\b0  We're importing the Java tools we need. The most important are 
\f2\fs26 Set
\f1\fs24  and 
\f2\fs26 HashSet
\f1\fs24 , which are perfect for this job because they are collections that 
\f3\b automatically ignore duplicates
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\

\f2\fs26 public class CompliantNode implements Node \{\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls4\ilvl0
\f3\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f1\b0  We're creating our "Compliant Node" (a good, rule-following node). We promise that it 
\f2\fs26 implements Node
\f1\fs24 , which means it will have all the methods the simulation 
\f4\i expects
\f1\i0  it to have (like 
\f2\fs26 setFollowees
\f1\fs24 , 
\f2\fs26 sendToFollowers
\f1\fs24 , etc.).\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\sa319\partightenfactor0

\f3\b \cf0 The Node's "Memory" (Variables)\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\

\f2\fs26     private int numRounds;\
    private int currentRound;\
    private boolean[] followees;\
    \
    // The master list of all transactions this node has ever seen.\
    private Set<Transaction> masterTxSet;\
    \
    // A temporary buffer of transactions we learned in the last round\
    // that we need to broadcast in the *current* round.\
    private Set<Transaction> txsToBroadcast;\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls5\ilvl0
\f3\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f1\b0  These are the variables the node uses to remember things.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa240\partightenfactor0
\ls5\ilvl1
\f2\fs26 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 numRounds
\f1\fs24 : "How many rounds will the 
\f4\i entire
\f1\i0  simulation last?"\
\ls5\ilvl1
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 currentRound
\f1\fs24 : "What round am I in right now? (I'll start at 0)."\
\ls5\ilvl1
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 followees
\f1\fs24 : "My 'friends list.' A 
\f2\fs26 true/false
\f1\fs24  list telling me exactly which nodes I'm supposed to listen to."\
\ls5\ilvl1
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 masterTxSet
\f1\fs24 : This is our 
\f3\b "master encyclopedia."
\f1\b0  Every unique transaction we 
\f4\i ever
\f1\i0  see goes in here and stays forever.\
\ls5\ilvl1
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 txsToBroadcast
\f1\fs24 : This is our 
\f3\b "gossip to-do list."
\f1\b0  It's a 
\f4\i temporary
\f1\i0  list of only the 
\f4\i new
\f1\i0  transactions we learned 
\f4\i last
\f1\i0  round, which we need to tell everyone about 
\f4\i this
\f1\i0  round.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\sa319\partightenfactor0

\f3\b \cf0 The "Birth" of a Node (Constructor)\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\

\f2\fs26     public CompliantNode(double p_graph, double p_malicious, double p_txDistribution, int numRounds) \{\
        this.numRounds = numRounds;\
        this.currentRound = 0;\
        this.masterTxSet = new HashSet<>();\
        this.txsToBroadcast = new HashSet<>();\
    \}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls6\ilvl0
\f3\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f1\b0  This is what happens when a new node is created. The simulation gives it some info (which we mostly ignore) and the 
\f2\fs26 numRounds
\f1\fs24 .\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa240\partightenfactor0
\ls6\ilvl1
\f2\fs26 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 this.numRounds = numRounds;
\f1\fs24 : "I'll remember the total number of rounds."\
\ls6\ilvl1
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 this.currentRound = 0;
\f1\fs24 : "I'll set my round counter to 0."\
\ls6\ilvl1
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 this.masterTxSet = new HashSet<>();
\f1\fs24 : "I'll get a new, 
\f4\i empty
\f1\i0  'master encyclopedia'."\
\ls6\ilvl1
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 this.txsToBroadcast = new HashSet<>();
\f1\fs24 : "I'll get a new, 
\f4\i empty
\f1\i0  'gossip to-do list'."\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\sa319\partightenfactor0

\f3\b \cf0 Getting Set Up\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\

\f2\fs26     public void setFollowees(boolean[] followees) \{\
        this.followees = followees;\
    \}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls7\ilvl0
\f3\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f1\b0  The simulation calls this to hand the node its "friends list" (
\f2\fs26 followees
\f1\fs24 ). The node just saves this list to its memory.\
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\

\f2\fs26     public void setPendingTransaction(Set<Transaction> pendingTransactions) \{\
        this.masterTxSet.addAll(pendingTransactions);\
        this.txsToBroadcast.addAll(pendingTransactions);\
    \}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls8\ilvl0
\f3\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f1\b0  The simulation calls this to give the node its 
\f4\i starting
\f1\i0  transactions.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa240\partightenfactor0
\ls8\ilvl1
\f2\fs26 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 this.masterTxSet.addAll(...)
\f1\fs24 : "I'll add these first transactions to my 'master encyclopedia'."\
\ls8\ilvl1
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 this.txsToBroadcast.addAll(...)
\f1\fs24 : "I'll 
\f4\i also
\f1\i0  add them to my 'gossip to-do list' so I can tell everyone about them in the first round."\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\sa319\partightenfactor0

\f3\b \cf0 The "Gossip" Phase\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\

\f2\fs26     public Set<Transaction> sendToFollowers() \{\
        // The simulation makes one final call after all rounds are done.\
        if (currentRound == numRounds) \{\
            return masterTxSet;\
        \}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls9\ilvl0
\f3\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f1\b0  The simulation calls this and asks, "What transactions are you broadcasting this round?"\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa240\partightenfactor0
\ls9\ilvl1
\f3\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Special Rule:
\f1\b0  "First, I check: is 
\f2\fs26 currentRound
\f1\fs24  equal to 
\f2\fs26 numRounds
\f1\fs24 ? If so, the game is over. The simulation is now asking for my 
\f4\i final answer
\f1\i0  (my consensus). I'll return my 
\f4\i entire
\f1\i0  'master encyclopedia' (
\f2\fs26 masterTxSet
\f1\fs24 )."\
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\

\f2\fs26         // This is a normal round. Send what we learned in the *previous* round.\
        Set<Transaction> toSend = this.txsToBroadcast;\
        \
        // Clear the buffer. We've broadcast these; we don't need to again.\
        this.txsToBroadcast = new HashSet<>();\
        \
        return toSend;\
    \}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls10\ilvl0
\f3\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f1\b0  "If it's a normal round:"\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa240\partightenfactor0
\ls10\ilvl1
\f2\fs26 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Set<Transaction> toSend = this.txsToBroadcast;
\f1\fs24 : "I'll grab my temporary 'gossip to-do list' (which has the new stuff I learned 
\f4\i last
\f1\i0  round)."\
\ls10\ilvl1
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 this.txsToBroadcast = new HashSet<>();
\f1\fs24 : "
\f3\b THIS IS A KEY FIX!
\f1\b0  After I've decided what to send, I immediately 
\f4\i wipe my to-do list clean
\f1\i0  by replacing it with a new, empty one. This way, I won't re-broadcast these transactions next round."\
\ls10\ilvl1
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 return toSend;
\f1\fs24 : "Here, simulation, send this small list of 
\f4\i new
\f1\i0  transactions to all my followers."\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\sa319\partightenfactor0

\f3\b \cf0 The "Listen" Phase\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\

\f2\fs26     public void receiveFromFollowees(Set<Candidate> candidates) \{\
        if (currentRound == numRounds) \{\
            return;\
        \}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls11\ilvl0
\f3\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f1\b0  The simulation calls this, giving me a pile of 
\f2\fs26 candidates
\f1\fs24  (transactions) from the nodes on my "friends list."\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa240\partightenfactor0
\ls11\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 "First, I check if the game is over. If so, I don't need to listen anymore. I'm done."\
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\

\f2\fs26         for (Candidate c : candidates) \{\
            if (followees[c.sender]) \{\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls12\ilvl0
\f3\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f1\b0  "I'll loop through every candidate 
\f2\fs26 c
\f1\fs24  in the pile."\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa240\partightenfactor0
\ls12\ilvl1
\f2\fs26 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 if (followees[c.sender])
\f1\fs24 : "Is the 
\f2\fs26 sender
\f1\fs24  of this candidate (
\f2\fs26 c.sender
\f1\fs24 ) on my 'friends list'? (Is the value 
\f2\fs26 true
\f1\fs24  in my 
\f2\fs26 followees
\f1\fs24  array?). If not, I ignore them. If yes, I'll process their transaction."\
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\

\f2\fs26                 boolean isNew = this.masterTxSet.add(c.tx);\
                \
                if (isNew) \{\
                    this.txsToBroadcast.add(c.tx);\
                \}\
            \}\
        \}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls13\ilvl0
\f3\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f1\b0  "
\f3\b THIS IS THE OTHER KEY FIX!
\f1\b0 "\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa240\partightenfactor0
\ls13\ilvl1
\f2\fs26 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 boolean isNew = this.masterTxSet.add(c.tx);
\f1\fs24 : "I try to add the transaction 
\f2\fs26 c.tx
\f1\fs24  to my 'master encyclopedia'. The 
\f2\fs26 add()
\f1\fs24  method of a 
\f2\fs26 HashSet
\f1\fs24  is really clever: it returns 
\f2\fs26 true
\f1\fs24  if the transaction was 
\f4\i new
\f1\i0  and 
\f2\fs26 false
\f1\fs24  if it was 
\f4\i already in the set
\f1\i0 ."\
\ls13\ilvl1
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 if (isNew)
\f1\fs24 : "Was this transaction 
\f4\i truly
\f1\i0  new to me? (Did 
\f2\fs26 add()
\f1\fs24  return 
\f2\fs26 true
\f1\fs24 ?)"\
\ls13\ilvl1
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 this.txsToBroadcast.add(c.tx);
\f1\fs24 : "If it 
\f4\i was
\f1\i0  new, I'll add it to my 'gossip to-do list' so I can tell everyone about it in the 
\f4\i next
\f1\i0  round."\
\pard\pardeftab720\partightenfactor0
\cf0 Java\
\

\f2\fs26         this.currentRound++;\
    \}\
\}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls14\ilvl0
\f3\b\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plain English:
\f1\b0  "I've finished listening to all the gossip for this round. I'll increase my round counter by one and wait for the next 
\f2\fs26 sendToFollowers
\f1\fs24  call."\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
\
}